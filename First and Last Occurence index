 int firstOcc(vector<int>arr,int size, int key ){
        int start=0,end=size-1;
        int mid=start+(end-start)/2;
        int ans=-1;
        while(start<=end){
            if(arr[mid]==key){                 //might or might not be left most
                ans=mid;
                end=mid-1;
            }
            else if(arr[mid]>key){            //key element in left
                end=mid-1;
            }
            else if(arr[mid]<key){              //key element in right
                start=mid+1;
            }
            mid=start+(end-start)/2;
        }
        return ans;
    }

 int lastOcc(vector<int>arr, int size, int key){
        int start=0, end=size-1;
        int mid=start+(end-start)/2;
        int ans=-1;
        while(start<=end){
            if(arr[mid]==key){                 //might or might not be right most
                ans= mid;
                start=mid+1;
            }
            else if(arr[mid]>key){
                end=mid-1;
            }
            else if (arr[mid] < key) {
                start = mid + 1;
            }
            mid = start + (end-start)/2;
        }
        return ans;
    }
 pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k){

     pair<int,int>p;
     p.first=firstOcc(arr,n,k);
     p.second=lastOcc(arr,n,k);
     return p;
 }
